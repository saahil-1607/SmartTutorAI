# -*- coding: utf-8 -*-
"""Smart Tutor AI (Enhanced Version)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1txmaWRO5f5TFg62dlqlbavR29KYI0QrS
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import os
import google.generativeai as genai
import json
from datetime import datetime

# --- Configuration ---
DATA_FILE = "student_database.csv"
SUBJECTS = ["math_score", "physics_score", "chemistry_score", "biology_score", "english_score"]

# --- Initialize dataset file ---
def initialize_database():
    if not os.path.exists(DATA_FILE):
        df = pd.DataFrame(columns=[
            "email", "first_name", "last_name", "gender", "learning_style",
            "part_time_job", "absence_days", "extracurricular_activities",
            "weekly_self_study_hours", "career_aspiration",
            "math_score", "physics_score", "chemistry_score",
            "biology_score", "english_score", "report_date", "study_points"
        ])
        df.to_csv(DATA_FILE, index=False)

# --- Define Agents ---
class PerformanceAgent:
    """Assesses academic performance based on scores."""
    def assess(self, score):
        if score < 50:
            return "Weak"
        elif score < 75:
            return "Average"
        else:
            return "Strong"

class StudyPlannerAgent:
    """Creates a personalized study schedule."""
    def create_schedule(self, performance_summary, study_hours):
        weak_subjects = [sub.replace("_score", "").capitalize() for sub, perf in performance_summary.items() if perf == "Weak"]
        avg_subjects = [sub.replace("_score", "").capitalize() for sub, perf in performance_summary.items() if perf == "Average"]

        if not weak_subjects and not avg_subjects:
            return "All your subjects are strong! Focus on advanced topics and practice papers across the board."

        # Assign weights: 2 for weak, 1 for average
        weights = {sub: 2 for sub in weak_subjects}
        weights.update({sub: 1 for sub in avg_subjects})
        total_weight = sum(weights.values())

        if total_weight == 0:
             return "Great work maintaining your scores! You can distribute your study time evenly."

        schedule = "### 📅 Your Personalized Weekly Study Plan:\n"
        for subject, weight in weights.items():
            hours_per_subject = (weight / total_weight) * study_hours
            schedule += f"- **{subject}:** Dedicate **{hours_per_subject:.1f} hours** this week to solidify your concepts.\n"

        return schedule

class ResourceAgent:
    """Generates personalized recommendations using Gemini AI."""
    def __init__(self):
        try:
            # Configure the Gemini API key
            api_key = os.getenv("GOOGLE_API_KEY")
            if not api_key:
                st.error("Google API Key not found. Please set the GOOGLE_API_KEY environment variable.")
                return
            genai.configure(api_key=api_key)
            self.model = genai.GenerativeModel("gemini-1.5-flash")
        except Exception as e:
            st.error(f"Failed to initialize Gemini: {e}")
            self.model = None

    def get_recommendations(self, career, performance_summary, learning_style):
        if not self.model:
            return "Resource Agent is not available."

        weak_subjects = [sub.replace("_score", "").capitalize() for sub, perf in performance_summary.items() if perf == "Weak"]
        strong_subjects = [sub.replace("_score", "").capitalize() for sub, perf in performance_summary.items() if perf == "Strong"]

        prompt = f"""
        As an expert academic advisor, create a personalized action plan for a junior college science student.

        **Student Profile:**
        - **Career Goal:** {career}
        - **Learning Style:** {learning_style}
        - **Strong Subjects:** {', '.join(strong_subjects) if strong_subjects else 'None'}
        - **Weak Subjects:** {', '.join(weak_subjects) if weak_subjects else 'None'}

        **Your Task:**
        Generate a response in a JSON format with three keys: "resource_checklist", "study_strategies", and "career_advice".
        - "resource_checklist": Provide a list of 3-4 specific, actionable online resources (videos, articles, interactive simulations) tailored to the student's weak subjects and learning style.
        - "study_strategies": Offer 2-3 concise study strategy tips based on their learning style.
        - "career_advice": Give one piece of actionable advice to help them pursue their {career} goal, considering their academic profile.

        Example format:
        {{
            "resource_checklist": ["Watch Khan Academy's video on 'Newton's Laws'", "Read the Wikipedia article on 'Organic Chemistry'"],
            "study_strategies": ["Use flashcards for key formulas.", "Create mind maps to connect concepts."],
            "career_advice": ["Consider joining a coding club to build skills for a software engineering career."]
        }}
        """
        try:
            response = self.model.generate_content(prompt)
            # Clean up the response text before parsing
            cleaned_response_text = response.text.strip().replace("```json", "").replace("```", "")
            return json.loads(cleaned_response_text)
        except Exception as e:
            return {"error": f"Could not fetch or parse Gemini recommendations: {str(e)}"}

class EngagementAgent:
    """Provides motivation and gamification."""
    def motivate(self, self_study, absences):
        if self_study < 5 or absences > 10:
            return "Increase your focus! Small, consistent steps make a big difference."
        elif 5 <= self_study <= 10:
            return "You’re doing well! Consistency is key to success."
        else:
            return "Excellent discipline! Keep pushing your limits and challenging yourself."

    def award_points(self, performance_summary):
        points = 20  # Base points for completing a report
        for perf in performance_summary.values():
            if perf == "Strong":
                points += 10
            elif perf == "Average":
                points += 5
        return points

# --- Initialize Agents ---
performance_agent = PerformanceAgent()
resource_agent = ResourceAgent()
engagement_agent = EngagementAgent()
study_planner_agent = StudyPlannerAgent()

# --- Main App Logic ---
initialize_database()

st.set_page_config(layout="wide")
st.title("🚀 Smart Tutor AI: Your Personal Learning Co-pilot")

# --- Page Navigation ---
if "page" not in st.session_state:
    st.session_state.page = "login"

# --- Login Page ---
if st.session_state.page == "login":
    st.header("Welcome! Let's get started.")
    email = st.text_input("Enter your email address to log in or sign up:", key="login_email")
    if st.button("Proceed"):
        if email:
            st.session_state.email = email
            df = pd.read_csv(DATA_FILE)
            if email in df['email'].values:
                st.session_state.page = "dashboard"
            else:
                st.session_state.page = "form"
            st.rerun()
        else:
            st.warning("Please enter a valid email address.")

# --- Form Page (for new users or new reports) ---
elif st.session_state.page == "form":
    st.header(f"✍️ New Report for {st.session_state.get('email', '')}")

    with st.form("student_form"):
        # Use columns for a cleaner layout
        col1, col2 = st.columns(2)
        with col1:
            first_name = st.text_input("First Name")
            last_name = st.text_input("Last Name")
            gender = st.selectbox("Gender", ["Male", "Female", "Other"])
            learning_style = st.selectbox("What's your primary learning style?", ["Visual (seeing)", "Auditory (hearing)", "Kinesthetic (doing)"])
            career_aspiration = st.text_input("What is your dream career?")

        with col2:
            part_time_job = st.selectbox("Do you have a part-time job?", ["No", "Yes"])
            extracurricular_activities = st.selectbox("Are you in extracurriculars?", ["No", "Yes"])
            absence_days = st.number_input("Absence Days this semester", min_value=0, max_value=90)
            self_study = st.number_input("Weekly Self-Study Hours", min_value=0, max_value=50)

        st.subheader("Enter Your Latest Subject Scores (0-100)")
        scores = {}
        score_cols = st.columns(len(SUBJECTS))
        for i, subject in enumerate(SUBJECTS):
            with score_cols[i]:
                scores[subject] = st.slider(subject.replace("_score", "").capitalize(), 0, 100, 50)

        submitted = st.form_submit_button("Generate My Personalized Report")

        if submitted:
            if not all([first_name, last_name, career_aspiration]):
                st.warning("Please fill all required fields.")
            else:
                # Save data to CSV
                new_data = {
                    "email": st.session_state.email, "first_name": first_name, "last_name": last_name,
                    "gender": gender, "learning_style": learning_style, "part_time_job": part_time_job,
                    "absence_days": absence_days, "extracurricular_activities": extracurricular_activities,
                    "weekly_self_study_hours": self_study, "career_aspiration": career_aspiration,
                    "report_date": datetime.now().strftime("%Y-%m-%d")
                }
                new_data.update(scores)

                # Award points
                temp_perf_summary = {sub: performance_agent.assess(score) for sub, score in scores.items()}
                new_data["study_points"] = engagement_agent.award_points(temp_perf_summary)

                df = pd.read_csv(DATA_FILE)
                df = pd.concat([df, pd.DataFrame([new_data])], ignore_index=True)
                df.to_csv(DATA_FILE, index=False)

                st.session_state.current_report_data = new_data
                st.session_state.page = "results"
                st.rerun()

# --- Dashboard Page (for existing users) ---
elif st.session_state.page == "dashboard":
    st.header(f"👋 Welcome Back, {st.session_state.email}!")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("📝 Create a New Report"):
            st.session_state.page = "form"
            st.rerun()
    with col2:
        if st.button("📈 View My Progress Dashboard"):
            st.session_state.page = "progress"
            st.rerun()

    st.button("Logout", on_click=lambda: st.session_state.clear() or st.session_state.update({"page": "login"}))


# --- Progress Dashboard Page ---
elif st.session_state.page == "progress":
    st.header("📊 Your Progress Dashboard")
    df = pd.read_csv(DATA_FILE)
    student_df = df[df['email'] == st.session_state.email].copy()

    if student_df.empty:
        st.warning("No reports found. Please create a new report.")
    else:
        student_df['report_date'] = pd.to_datetime(student_df['report_date'])
        student_df = student_df.sort_values(by='report_date')

        # --- Score Trend Chart ---
        st.subheader("Subject Score Trends Over Time")
        fig, ax = plt.subplots(figsize=(10, 6))
        for subject in SUBJECTS:
            ax.plot(student_df['report_date'], student_df[subject], marker='o', linestyle='-', label=subject.replace('_score', '').capitalize())

        ax.set_title("Your Academic Journey")
        ax.set_xlabel("Date of Report")
        ax.set_ylabel("Score (out of 100)")
        ax.legend()
        ax.grid(True, linestyle='--', alpha=0.6)
        plt.xticks(rotation=45)
        st.pyplot(fig)

        # --- Gamification and Stats ---
        st.subheader("Your Stats")
        total_points = student_df['study_points'].sum()
        st.metric(label="Total Study Points Earned 🌟", value=f"{total_points}")

    if st.button("Back to Dashboard"):
        st.session_state.page = "dashboard"
        st.rerun()

# --- Results Page ---
elif st.session_state.page == "results":
    student = st.session_state.current_report_data
    st.header(f"💡 Analysis for {student['first_name']} {student['last_name']}")

    # --- Agent Processing ---
    performance_summary = {sub: performance_agent.assess(student[sub]) for sub in SUBJECTS}
    engagement_message = engagement_agent.motivate(student['weekly_self_study_hours'], student['absence_days'])
    points_earned = student['study_points']
    study_plan = study_planner_agent.create_schedule(performance_summary, student['weekly_self_study_hours'])
    recommendations = resource_agent.get_recommendations(student['career_aspiration'], performance_summary, student['learning_style'])

    # --- Display Results ---
    st.success(f"🎉 You've earned {points_earned} Study Points for this report!")
    st.info(f"**Engagement Agent says:** {engagement_message}")

    st.markdown("---")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Performance Analysis")
        performance_list = [(sub.replace("_score", "").capitalize(), perf) for sub, perf in performance_summary.items()]
        df_perf = pd.DataFrame(performance_list, columns=["Subject", "Performance"])
        st.table(df_perf)

        st.markdown(study_plan)

    with col2:
        st.subheader("Personalized Action Plan")
        if "error" in recommendations:
            st.error(recommendations["error"])
        else:
            with st.expander("✅ **Your Recommended Resource Checklist**", expanded=True):
                if "resource_checklist" in recommendations:
                    for item in recommendations["resource_checklist"]:
                        if isinstance(item, str):
                            st.checkbox(item)
                        else:
                            st.checkbox(str(item))
                else:
                    st.write("No resources generated.")

            with st.expander("🧠 **Tailored Study Strategies**"):
                 if "study_strategies" in recommendations:
                    for strategy in recommendations["study_strategies"]:
                        st.markdown(f"- {strategy}")
                 else:
                    st.write("No strategies generated.")

            with st.expander("🏆 **Career Advice**"):
                if "career_advice" in recommendations:
                    st.markdown(f"_{recommendations['career_advice']}_")
                else:
                    st.write("No career advice generated.")

    st.markdown("---")
    if st.button("Back to Dashboard"):
        st.session_state.page = "dashboard"
        st.rerun()